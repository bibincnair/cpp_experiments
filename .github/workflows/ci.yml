name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CLANG_TIDY_VERSION: "19.1.1"
  VERBOSE: 1


jobs:
  Test:
    name: ${{matrix.build_type}} LLVM
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Release
          - Debug
        include:
          - build_type: Debug
            enable_coverage: true
          - build_type: Release
            enable_coverage: false


    steps:
      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: llvm-19.1.1
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: OFF
          generator: "Ninja Multi-Config"

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-19.1.1
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cppcheck: true
          gcovr: true

      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "Ninja Multi-Config" -Dcpp_experiments_ENABLE_IPO=OFF -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -Dcpp_experiments_PACKAGING_MAINTAINER_MODE:BOOL=OFF -Dcpp_experiments_ENABLE_COVERAGE:BOOL=${{ matrix.enable_coverage }} -DGIT_SHA:STRING=${{ github.sha }}

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Test and coverage
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          if [ "${{ matrix.enable_coverage }}" = "true" ]; then
            gcovr -j 2 --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable "llvm-cov gcov" --config-file=""
          fi

      - name: Publish to codecov
        if: matrix.enable_coverage
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          flags: ubuntu-llvm
          name: ubuntu-llvm-coverage
          files: ./build/coverage.xml
